apply plugin: 'maven-publish'

Properties remotePS = new Properties()
remotePS.load(new FileInputStream(rootProject.file('remote.properties')))

Properties mavenPS = new Properties()
mavenPS.load(new FileInputStream(project.file('maven.properties')))

version mavenPS['version']

if (project.getPlugins().hasPlugin("com.android.library")) {
    task sourceJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier "sources"
    }
} else if (project.getPlugins().hasPlugin("java")) {
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId mavenPS['groupId']
            artifactId mavenPS['artifactId']
            if (project.getPlugins().hasPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/" + project.name + "-release.aar")
            } else {
                artifact("$buildDir/libs/" + project.name + "-" + mavenPS['version'] + ".jar")
            }
//            artifact(sourceJar)
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                ["api", "runtimeOnly", "implementation"].each {
                    configurations.getByName(it, {
                        def scope = it.incoming.name
                        it.dependencies.each {
                            if (null != it.group) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                dependencyNode.appendNode('scope', scope)
                            }
                        }
                    })
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username remotePS['username']
                password remotePS['password']
            }
            if (project.version.toLowerCase().contains('alpha')) {
                url "http://172.17.31.40:8089/repository/alpha/"
            } else if (project.version.toLowerCase().contains('beta')) {
                url "http://172.17.31.40:8089/repository/beta/"
            } else {
                url "http://172.17.31.40:8089/repository/release/"
            }
        }
    }
}

task toRemote(dependsOn: ['build', 'publish']) {
    doLast {
        publish
    }
}

task toLocal(dependsOn: ['build', 'publishToMavenLocal']) {
    doLast {
        publishToMavenLocal
    }
}